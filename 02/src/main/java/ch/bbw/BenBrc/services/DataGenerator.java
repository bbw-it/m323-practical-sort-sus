package ch.bbw.BenBrc.services;

import ch.bbw.BenBrc.factories.*;
import ch.bbw.BenBrc.models.*;

import java.util.*;
/**
 * Die Klasse DataGenerator dient als zentrale Stelle zur Erzeugung von Beispieldaten fÃ¼r das CoSoMi-System.
 * nutzt jeweils die zugehÃ¶rigen Factory-Klassen fÃ¼r:
 * - Compounds (Ã¼ber CompoundFactory)
 * - Solutions (basierend auf den erzeugten Compounds Ã¼ber SolutionFactory)
 * - Mixes (basierend auf den Solutions Ã¼ber MixFactory)
 * Diese Methoden ermÃ¶glichen eine vollstÃ¤ndige und gekettete Datengenerierung fÃ¼r Tests oder Demonstrationen.
 * Autor: Benedict BrÃ¼ck
 * Version: 1.0
 * Datum: 19.06.2025
 */
public class DataGenerator {

    /**
     * Generiert eine Liste von chemischen Grundstoffen (Compounds) mit Hilfe der CompoundFactory.
     * @return Liste von Compounds (Standard: 100 StÃ¼ck)
     */
    public static List<Compounds> generateCompounds() {
        return CompoundFactory.generateCompounds(100);
    }

    /**
     * Generiert eine Liste von Solutions (verÃ¤nderte oder angereicherte Compounds).
     * Diese bauen auf bestehenden Compounds auf und erweitern deren Eigenschaften.
     * @param compounds Liste der Grundstoffe, aus denen Solutions erstellt werden sollen
     * @return Liste von Solutions
     */
    public static List<Solutions> generateSolutions(List<Compounds> compounds) {
        return SolutionFactory.generateSolutionsFrom(compounds);
    }

    /**
     * Generiert eine Liste von Mixes (chemische Mischungen aus Solutions).
     * Die Mischungen bestehen aus einer Kombination von LÃ¶sungen.
     * @param solutions Liste der Solutions, die fÃ¼r Mischungen verwendet werden sollen
     * @return Liste von Mixes
     */
    public static List<Mixes> generateMixes(List<Solutions> solutions) {
        return MixFactory.generateMixesFrom(solutions);
    }

    /**
     * Generiert alle Daten (Compounds, Solutions und Mixes) und gibt eine Zusammenfassung der generierten Daten aus.
     * Dient zum testen und demonstrieren der FunktionalitÃ¤t der DataGenerator-Klasse.
     */
    public static void generateAllAndPrint() {
        List<Compounds> compounds = generateCompounds();
        List<Solutions> solutions = generateSolutions(compounds);
        List<Mixes> mixes = generateMixes(solutions);

        System.out.println("âœ… Generated " + compounds.size() + " compounds.");
        System.out.println("âœ… Generated " + solutions.size() + " solutions.");
        System.out.println("âœ… Generated " + mixes.size() + " mixes.");

        System.out.println("\\nðŸ“Œ Example compound: " + compounds.get(0));
        System.out.println("ðŸ“Œ Example solution: " + solutions.get(0));
        System.out.println("ðŸ“Œ Example mix: " + mixes.get(0));
    }
}

